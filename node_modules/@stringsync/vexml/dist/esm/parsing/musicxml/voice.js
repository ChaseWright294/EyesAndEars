import * as util from '../../util';
import { VoiceContext } from './contexts';
import { Rest } from './rest';
export class Voice {
    config;
    log;
    id;
    events;
    constructor(config, log, id, events) {
        this.config = config;
        this.log = log;
        this.id = id;
        this.events = events;
        util.assert(events.every((event) => event.voiceId === id), 'Expected all events to belong to the current voice');
    }
    static create(config, log, id, events) {
        return new Voice(config, log, id, events);
    }
    parse(staveCtx) {
        const voiceCtx = new VoiceContext(staveCtx, this.id);
        if (voiceCtx.getMultiRestCount() > 0) {
            const time = voiceCtx.getTime();
            const rest = Rest.whole(this.config, this.log, time);
            return {
                type: 'voice',
                entries: [rest.parse(voiceCtx)],
                beams: [],
                tuplets: [],
            };
        }
        return {
            type: 'voice',
            entries: this.parseEntries(voiceCtx),
            beams: voiceCtx.getBeams(),
            tuplets: voiceCtx.getTuplets(),
        };
    }
    parseEntries(voiceCtx) {
        const entries = new Array();
        for (const event of this.events) {
            switch (event.type) {
                case 'note':
                    entries.push(event.note.parse(voiceCtx));
                    break;
                case 'rest':
                    entries.push(event.rest.parse(voiceCtx));
                    break;
                case 'chord':
                    entries.push(event.chord.parse(voiceCtx));
                    break;
                case 'dynamics':
                    entries.push(event.dynamics.parse());
                    break;
                case 'wedge':
                    event.wedge.parse(voiceCtx);
                    break;
                case 'pedal':
                    event.pedal.parse(voiceCtx);
                    break;
                case 'octaveshift':
                    event.octaveShift.parse(voiceCtx);
                    break;
                default:
                    util.assertUnreachable();
            }
        }
        return entries;
    }
    isTickable(event) {
        return event.type === 'note' || event.type === 'rest' || event.type === 'chord';
    }
}

import * as playback from '../playback';
import * as events from '../events';
import * as elements from '../elements';
import { Rect } from '../spatial';
type CursorState = {
    index: number;
    hasNext: boolean;
    hasPrevious: boolean;
    cursorRect: Rect;
    sequenceEntry: playback.SequenceEntry;
};
type EventMap = {
    change: CursorState;
};
export type CursorVerticalSpan = {
    fromPartIndex: number;
    toPartIndex: number;
};
export declare class Cursor {
    private scroller;
    private states;
    private sequence;
    private cheapLocator;
    private expensiveLocator;
    private span;
    private topic;
    private index;
    private alpha;
    private constructor();
    static create(scrollContainer: HTMLElement, score: elements.Score, sequence: playback.Sequence, span: CursorVerticalSpan): Cursor;
    getState(): CursorState;
    next(): void;
    previous(): void;
    goTo(index: number): void;
    /** Snaps to the closest sequence entry step. */
    snap(timestampMs: number): void;
    /** Seeks to the exact position, interpolating as needed. */
    seek(timestampMs: number): void;
    isFullyVisible(): boolean;
    scrollIntoView(behavior?: ScrollBehavior): void;
    addEventListener<N extends keyof EventMap>(name: N, listener: events.EventListener<EventMap[N]>, opts?: {
        emitBootstrapEvent?: boolean;
    }): number;
    removeEventListener(...ids: number[]): void;
    removeAllEventListeners(): void;
    private getScrollPoint;
    private update;
    private getIndexClosestTo;
}
export {};

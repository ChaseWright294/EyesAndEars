import * as data from '../data';
import { SystemKey, MeasureKey, FragmentKey, PartKey, StaveKey, VoiceKey, VoiceEntryKey, PartLabelKey, CurveKey, BeamKey, TupletKey, WedgeKey, PedalKey, OctaveShiftKey, VibratoKey, ArticulationKey } from './types';
/** A wrapper around {@link data.Document} that provides querying capabilities. */
export declare class Document {
    private data;
    constructor(data: data.Document);
    getTitle(): string | null;
    getPartLabel(key: PartLabelKey): string;
    getScore(): data.Score;
    getCurves(): data.Curve[];
    getCurve(key: CurveKey): data.Curve;
    getWedges(): data.Wedge[];
    getWedge(key: WedgeKey): data.Wedge;
    getPedals(): data.Pedal[];
    getPedal(key: PedalKey): data.Pedal;
    getOctaveShifts(): data.OctaveShift[];
    getOctaveShift(key: OctaveShiftKey): data.OctaveShift;
    getOctaveShiftKey(id: string): OctaveShiftKey;
    getVibratos(): data.Vibrato[];
    getVibrato(key: VibratoKey): data.Vibrato;
    getSystems(): data.System[];
    getSystemCount(): number;
    isFirstSystem(key: SystemKey): boolean;
    isLastSystem(key: SystemKey): boolean;
    getPreviousSystem(key: SystemKey): data.System | null;
    getSystem(key: SystemKey): data.System;
    getNextSystem(key: SystemKey): data.System | null;
    getMeasures(key: SystemKey): data.Measure[];
    getMeasureCount(key: SystemKey): number;
    isFirstMeasure(key: MeasureKey): boolean;
    isLastMeasure(key: MeasureKey): boolean;
    getPreviousMeasure(key: MeasureKey): data.Measure | null;
    getMeasure(key: MeasureKey): data.Measure;
    getNextMeasure(key: MeasureKey): data.Measure | null;
    getMeasureMultiRestCount(key: MeasureKey): number;
    getAbsoluteMeasureIndex(key: MeasureKey): number;
    getFragments(key: MeasureKey): data.Fragment[];
    getFragmentCount(key: MeasureKey): number;
    isFirstFragment(key: FragmentKey): boolean;
    isLastFragment(key: FragmentKey): boolean;
    getPreviousFragment(key: FragmentKey): data.Fragment | null;
    getFragment(key: FragmentKey): data.Fragment;
    getNonMusicalFragment(key: FragmentKey): data.NonMusicalFragment;
    getNextFragment(key: FragmentKey): data.Fragment | null;
    getParts(key: FragmentKey): data.Part[];
    getPartCount(key: FragmentKey): number;
    isFirstPart(key: PartKey): boolean;
    isLastPart(key: PartKey): boolean;
    getPartMultiRestCount(key: PartKey): number;
    getPart(key: PartKey): data.Part;
    getStaves(key: PartKey): data.Stave[];
    getStaveCount(key: PartKey): number;
    isFirstStave(key: StaveKey): boolean;
    isLastStave(key: StaveKey): boolean;
    isTabStave(key: StaveKey): boolean;
    getStaveMultiRestCount(key: StaveKey): number;
    getPreviouslyPlayedStave(key: StaveKey): data.Stave | null;
    getStave(key: StaveKey): data.Stave;
    getNextPlayedStave(key: StaveKey): data.Stave | null;
    getVoices(key: StaveKey): data.Voice[];
    getVoiceCount(key: StaveKey): number;
    isFirstVoice(key: VoiceKey): boolean;
    isLastVoice(key: VoiceKey): boolean;
    getVoice(key: VoiceKey): data.Voice;
    getBeams(key: VoiceKey): data.Beam[];
    getBeamCount(key: VoiceKey): number;
    getBeam(key: BeamKey): data.Beam;
    getTuplets(key: VoiceKey): data.Tuplet[];
    getTupletCount(key: VoiceKey): number;
    getTuplet(key: TupletKey): data.Tuplet;
    getVoiceEntries(key: VoiceKey): data.VoiceEntry[];
    getVoiceEntryCount(key: VoiceKey): number;
    isFirstVoiceEntry(key: VoiceEntryKey): boolean;
    isLastVoiceEntry(key: VoiceEntryKey): boolean;
    getVoiceEntry(key: VoiceEntryKey): data.VoiceEntry;
    getNote(key: VoiceEntryKey): data.Note;
    getRest(key: VoiceEntryKey): data.Rest;
    getChord(key: VoiceEntryKey): data.Chord;
    getDynamics(key: VoiceEntryKey): data.Dynamics;
    getArticulations(key: VoiceEntryKey): data.Articulation[];
    getArticulation(key: ArticulationKey): data.Articulation;
    clone(): Document;
}

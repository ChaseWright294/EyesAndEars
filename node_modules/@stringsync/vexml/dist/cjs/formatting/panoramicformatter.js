"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PanoramicFormatter = void 0;
const util = __importStar(require("../util"));
const config_1 = require("../config");
const debug_1 = require("../debug");
/**
 * A formatter formats a document for infinite x-scrolling as a single system.
 */
class PanoramicFormatter {
    config;
    log;
    constructor(opts) {
        this.config = { ...config_1.DEFAULT_CONFIG, ...opts?.config };
        this.log = opts?.logger ?? new debug_1.NoopLogger();
        util.assertNull(this.config.WIDTH, 'WIDTH must be null for PanoramicFormatter');
    }
    format(document) {
        const clone = document.clone();
        const measures = clone.score.systems.flatMap((system) => system.measures);
        clone.score.systems = [{ type: 'system', measures }];
        return clone;
    }
}
exports.PanoramicFormatter = PanoramicFormatter;

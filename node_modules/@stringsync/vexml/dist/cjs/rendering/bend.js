"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bend = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
const util_1 = require("../util");
const BEND_WIDTH = 32;
class Bend {
    config;
    log;
    document;
    key;
    constructor(config, log, document, key) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
    }
    render() {
        const voiceEntry = this.document.getVoiceEntry(this.key);
        const phrases = new Array();
        if (voiceEntry.type === 'note' || voiceEntry.type === 'chord') {
            phrases.push(...voiceEntry.bends.map((bend) => this.toVexflowBendPhrase(bend)));
        }
        const vexflowModifiers = new Array();
        if (phrases.length > 0) {
            vexflowModifiers.push(new vexflow.Bend(phrases));
        }
        return {
            type: 'bend',
            key: this.key,
            rect: spatial_1.Rect.empty(),
            vexflowModifiers,
        };
    }
    toVexflowBendPhrase(bend) {
        const bendType = bend.bendType;
        const semitones = bend.semitones;
        let text = '';
        if (semitones === 2) {
            text = 'full';
        }
        else if (semitones === 1) {
            text = '1/2';
        }
        else if (semitones === 0.5) {
            text = '1/4';
        }
        else {
            const { whole, remainder } = util_1.Fraction.fromDecimal(semitones).toMixed();
            if (whole > 0 && remainder.numerator > 0) {
                text = `${whole} ${remainder.numerator}/${remainder.denominator}`;
            }
            else if (whole > 0) {
                text = `${whole}`;
            }
            else if (remainder.numerator > 0) {
                text = `${remainder.numerator}/${remainder.denominator}`;
            }
        }
        let type;
        switch (bendType) {
            case 'prebend':
                // TODO: Support pre-bends when they are supported by VexFlow.
                type = vexflow.Bend.UP;
                break;
            case 'release':
                type = vexflow.Bend.DOWN;
                break;
            default:
                type = vexflow.Bend.UP;
                break;
        }
        return { text, type, width: BEND_WIDTH, drawWidth: BEND_WIDTH };
    }
}
exports.Bend = Bend;

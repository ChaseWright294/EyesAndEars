"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Part = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
const stave_1 = require("./stave");
const pen_1 = require("./pen");
class Part {
    config;
    log;
    document;
    key;
    position;
    constructor(config, log, document, key, position) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
        this.position = position;
    }
    render() {
        const pen = new pen_1.Pen(this.position);
        const staveRenders = this.renderStaves(pen);
        const vexflowBrace = this.renderVexflowBrace(staveRenders);
        return {
            type: 'part',
            key: this.key,
            rect: spatial_1.Rect.empty(), // placeholder
            staveRenders,
            vexflowBrace,
        };
    }
    renderStaves(pen) {
        const staveRenders = new Array();
        const staveCount = this.document.getStaveCount(this.key);
        for (let staveIndex = 0; staveIndex < staveCount; staveIndex++) {
            const key = { ...this.key, staveIndex };
            const staveRender = new stave_1.Stave(this.config, this.log, this.document, key, pen.position()).render();
            staveRenders.push(staveRender);
            // TODO: Check <stave-layouts> first, which has a part+stave scoped margin.
            pen.moveBy({ dy: this.config.DEFAULT_STAVE_MARGIN_BOTTOM + staveRender.vexflowStave.getHeight() });
        }
        return staveRenders;
    }
    renderVexflowBrace(staveRenders) {
        const isFirstMeasure = this.document.isFirstMeasure(this.key);
        const isFirstFragment = this.document.isFirstFragment(this.key);
        if (isFirstMeasure && isFirstFragment && staveRenders.length > 1) {
            const firstVexflowStave = staveRenders.at(0).vexflowStave;
            const lastVexflowStave = staveRenders.at(-1).vexflowStave;
            return new vexflow.StaveConnector(firstVexflowStave, lastVexflowStave).setType('brace');
        }
        return null;
    }
}
exports.Part = Part;

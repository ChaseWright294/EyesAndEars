"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Time = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
const util_1 = require("../util");
const ADDITIONAL_COMPLEX_TIME_SIGNATURE_COMPONENT_WIDTH = 18;
class Time {
    config;
    log;
    document;
    key;
    constructor(config, log, document, key) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
    }
    render() {
        const timeSpecs = this.getTimeSpecs();
        const vexflowTimeSignatures = timeSpecs.map((t) => new vexflow.TimeSignature(t));
        const padding = ADDITIONAL_COMPLEX_TIME_SIGNATURE_COMPONENT_WIDTH * (timeSpecs.length - 1);
        const width = vexflowTimeSignatures.reduce((sum, t) => sum + t.getWidth(), padding);
        return {
            type: 'time',
            rect: spatial_1.Rect.empty(), // placeholder
            key: this.key,
            vexflowTimeSignatures,
            width,
        };
    }
    getTimeSpecs() {
        const time = this.document.getStave(this.key).signature.time;
        const components = this.toFractions(time.components);
        switch (time.symbol) {
            case 'common':
                return ['C'];
            case 'cut':
                return ['C|'];
            case 'single-number':
                const sum = util_1.Fraction.sum(...components).simplify();
                return [this.toSimpleTimeSpecs(sum)];
            case 'hidden':
                return [];
        }
        if (components.length > 1) {
            return this.toComplexTimeSpecs(components);
        }
        return [this.toSimpleTimeSpecs(components[0])];
    }
    toSimpleTimeSpecs(component) {
        return `${component.numerator}/${component.denominator}`;
    }
    toComplexTimeSpecs(components) {
        const denominators = new Array();
        const memo = {};
        for (const component of components) {
            const numerator = component.numerator;
            const denominator = component.denominator;
            if (typeof memo[denominator] === 'undefined') {
                denominators.push(denominator);
            }
            memo[denominator] ??= [];
            memo[denominator].push(numerator);
        }
        const result = new Array();
        for (let index = 0; index < denominators.length; index++) {
            const denominator = denominators[index];
            const isLast = index === denominators.length - 1;
            result.push(`${memo[denominator].join('+')}/${denominator}`);
            if (!isLast) {
                result.push('+');
            }
        }
        return result;
    }
    toFractions(components) {
        return components.map((component) => new util_1.Fraction(component.numerator, component.denominator));
    }
}
exports.Time = Time;

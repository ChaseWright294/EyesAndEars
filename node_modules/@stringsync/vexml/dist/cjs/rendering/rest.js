"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rest = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
class Rest {
    config;
    log;
    document;
    key;
    constructor(config, log, document, key) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
    }
    render() {
        const rest = this.document.getRest(this.key);
        const isTabStave = this.document.isTabStave(this.key);
        const vexflowNote = isTabStave
            ? new vexflow.TabNote({
                positions: [{ str: 0, fret: '' }],
                duration: `${rest.durationType}r`,
                dots: rest.dotCount,
                alignCenter: this.shouldAlignCenter(),
            })
            : new vexflow.StaveNote({
                keys: this.getVexflowStaveKeys(),
                duration: `${rest.durationType}r`,
                dots: rest.dotCount,
                clef: this.document.getStave(this.key).signature.clef.sign,
                alignCenter: this.shouldAlignCenter(),
            });
        for (let index = 0; index < rest.dotCount; index++) {
            vexflow.Dot.buildAndAttach([vexflowNote]);
        }
        return {
            type: 'rest',
            key: this.key,
            rect: spatial_1.Rect.empty(), // placeholder
            vexflowNote: vexflowNote,
            beamId: rest.beamId,
            tupletIds: rest.tupletIds,
        };
    }
    getVexflowStaveKeys() {
        const rest = this.document.getRest(this.key);
        const displayPitch = rest.displayPitch;
        if (displayPitch) {
            return [`${displayPitch.step}/${displayPitch.octave}`];
        }
        const clef = this.document.getStave(this.key).signature.clef;
        if (clef.sign === 'bass') {
            return ['D/3'];
        }
        if (rest.durationType === '2') {
            return ['B/4'];
        }
        if (rest.durationType === '1') {
            return ['D/5'];
        }
        return ['B/4'];
    }
    shouldAlignCenter() {
        const voiceEntryCount = this.document.getVoiceEntryCount(this.key);
        if (voiceEntryCount > 1) {
            return false;
        }
        const rest = this.document.getRest(this.key);
        if (rest.durationType === '1') {
            return true;
        }
        if (rest.durationType === '2') {
            return true;
        }
        return false;
    }
}
exports.Rest = Rest;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderRegistry = void 0;
const util = __importStar(require("../util"));
/** RenderRegistry tracks associations between leaf render objects with spanner IDs. */
class RenderRegistry {
    store;
    constructor(store) {
        this.store = store;
    }
    static create(systemRenders) {
        const store = new Map();
        const renders = systemRenders
            .flatMap((system) => system.measureRenders.flatMap((m) => m.fragmentRenders))
            .flatMap((f) => f.partRenders)
            .flatMap((p) => p.staveRenders)
            .flatMap((s) => s.voiceRenders)
            .flatMap((v) => v.entryRenders);
        for (const render of renders) {
            const ids = RenderRegistry.ids(render);
            for (const id of ids) {
                const renders = store.get(id) ?? [];
                util.assertDefined(renders);
                renders.push(render);
                store.set(id, renders);
            }
        }
        return new RenderRegistry(store);
    }
    static ids(render) {
        const ids = new Array();
        function collect(o) {
            if (Array.isArray(o)) {
                ids.push(...o);
            }
            else if (o) {
                ids.push(o);
            }
        }
        if (render.type === 'note') {
            collect(render.curveIds);
            collect(render.graceCurves.map((c) => c.curveId));
            collect(render.beamId);
            collect(render.wedgeId);
            collect(render.tupletIds);
            collect(render.pedalMark?.pedalId);
            collect(render.octaveShiftId);
            collect(render.vibratoIds);
        }
        if (render.type === 'rest') {
            collect(render.tupletIds);
            collect(render.beamId);
        }
        return util.unique(ids);
    }
    get(id) {
        return this.store.get(id) ?? [];
    }
}
exports.RenderRegistry = RenderRegistry;

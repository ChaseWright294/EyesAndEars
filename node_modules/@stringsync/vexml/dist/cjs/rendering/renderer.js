"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Renderer = void 0;
const vexflow = __importStar(require("vexflow"));
const components = __importStar(require("../components"));
const elements = __importStar(require("../elements"));
const score_1 = require("./score");
const config_1 = require("../config");
const debug_1 = require("../debug");
const document_1 = require("./document");
class Renderer {
    config;
    log;
    constructor(opts) {
        this.config = { ...config_1.DEFAULT_CONFIG, ...opts?.config };
        this.log = opts?.logger ?? new debug_1.NoopLogger();
    }
    render(div, document) {
        const width = this.config.WIDTH ?? undefined;
        const height = this.config.HEIGHT ?? undefined;
        let root;
        let container;
        let renderer;
        switch (this.config.DRAWING_BACKEND) {
            case 'svg':
                root = components.Root.svg(div, width, height);
                container = root.getVexflowContainerElement();
                renderer = new vexflow.Renderer(container, vexflow.Renderer.Backends.SVG);
                break;
            case 'canvas':
                root = components.Root.canvas(div, width, height);
                container = root.getVexflowContainerElement();
                renderer = new vexflow.Renderer(container, vexflow.Renderer.Backends.CANVAS);
                break;
            default:
                this.log.info(`backend not specified or supported, defaulting to 'svg'`);
                root = components.Root.svg(div, width, height);
                container = root.getVexflowContainerElement();
                renderer = new vexflow.Renderer(container, vexflow.Renderer.Backends.SVG);
        }
        const stopwatch = debug_1.Stopwatch.start();
        const renderingDocument = new document_1.Document(document);
        const scoreRender = new score_1.Score(this.config, this.log, renderingDocument, this.config.WIDTH).render();
        const ctx = renderer.resize(scoreRender.rect.w, scoreRender.rect.h).getContext();
        const scoreElement = elements.Score.create(this.config, this.log, renderingDocument, ctx, root, scoreRender);
        scoreElement.render();
        const lap = stopwatch.lap();
        if (lap < 1) {
            this.log.info(`rendered score in ${lap.toFixed(3)}ms`);
        }
        else {
            this.log.info(`rendered score in ${Math.round(lap)}ms`);
        }
        return scoreElement;
    }
}
exports.Renderer = Renderer;

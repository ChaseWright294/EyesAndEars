"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Key = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
const KEY_SIGNATURE_PADDING = 15;
/** Represents a musical key signature, not document key. */
class Key {
    config;
    log;
    document;
    key;
    constructor(config, log, document, key) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
    }
    render() {
        const vexflowKeySignature = this.getVexflowKeySignature();
        return {
            type: 'key',
            key: this.key,
            rect: spatial_1.Rect.empty(), // placeholder
            width: this.getWidth(),
            vexflowKeySignature,
        };
    }
    getAlterations() {
        const keySignature = this.document.getStave(this.key).signature.key;
        const alterations = new Array();
        if (Math.abs(keySignature.fifths) > 7) {
            const additional = Math.abs(keySignature.fifths) - 7;
            for (let index = 0; index < additional; index++) {
                alterations.push(keySignature.fifths > 0 ? '##' : 'bb');
            }
        }
        return alterations;
    }
    getWidth() {
        const vexflowStave = new vexflow.Stave(0, 0, 0);
        const vexflowKeySignature = this.getVexflowKeySignature();
        vexflowKeySignature.addToStave(vexflowStave);
        return vexflowKeySignature.getWidth() + KEY_SIGNATURE_PADDING;
    }
    getVexflowKeySignature() {
        const keySignature = this.document.getStave(this.key).signature.key;
        return new vexflow.KeySignature(keySignature.rootNote, keySignature.previousKey?.rootNote, this.getAlterations());
    }
}
exports.Key = Key;

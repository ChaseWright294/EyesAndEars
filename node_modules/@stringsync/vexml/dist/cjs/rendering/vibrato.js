"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vibrato = void 0;
const vexflow = __importStar(require("vexflow"));
const spatial_1 = require("../spatial");
class Vibrato {
    config;
    log;
    document;
    key;
    registry;
    constructor(config, log, document, key, registry) {
        this.config = config;
        this.log = log;
        this.document = document;
        this.key = key;
        this.registry = registry;
    }
    render() {
        const vexflowVibratoBrackets = this.renderVexflowVibratoBrackets();
        return {
            type: 'vibrato',
            rect: spatial_1.Rect.empty(),
            vexflowVibratoBrackets,
        };
    }
    renderVexflowVibratoBrackets() {
        const vibrato = this.document.getVibrato(this.key);
        const noteRenders = this.registry.get(vibrato.id);
        if (noteRenders.length < 2) {
            this.log.warn('cannot render vibrato with less than 2 notes, skipping', { vibratoIndex: this.key.vibratoIndex });
            return [];
        }
        const vexflowVibratoBrackets = new Array();
        const systemIndexes = noteRenders.map((n) => n.key.systemIndex);
        for (const systemIndex of systemIndexes) {
            const renders = noteRenders.filter((n) => n.key.systemIndex === systemIndex);
            if (renders.length > 1) {
                const vexflowVibratoBracket = new vexflow.VibratoBracket({
                    start: renders.at(0).vexflowNote,
                    stop: renders.at(-1).vexflowNote,
                });
                vexflowVibratoBrackets.push(vexflowVibratoBracket);
            }
        }
        return vexflowVibratoBrackets;
    }
}
exports.Vibrato = Vibrato;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scroller = void 0;
const spatial = __importStar(require("../spatial"));
const SCROLLER_HORIZONTAL_PADDING = 20;
const SCROLLER_VERTICAL_PADDING = 20;
class Scroller {
    scrollContainer;
    constructor(scrollContainer) {
        this.scrollContainer = scrollContainer;
    }
    isFullyVisible(rect) {
        const visibleRect = this.getVisibleRect();
        return (rect.x >= visibleRect.x &&
            rect.y >= visibleRect.y &&
            rect.x + rect.w <= visibleRect.x + visibleRect.w &&
            rect.y + rect.h <= visibleRect.y + visibleRect.h);
    }
    scrollTo(position, behavior = 'auto') {
        if (!this.isAt(position)) {
            this.scrollContainer.scrollTo({
                top: position.y - SCROLLER_VERTICAL_PADDING,
                left: position.x - SCROLLER_HORIZONTAL_PADDING,
                behavior,
            });
        }
    }
    isAt(position) {
        return this.scrollContainer.scrollLeft === position.x && this.scrollContainer.scrollTop === position.y;
    }
    getVisibleRect() {
        const scrollLeft = this.scrollContainer.scrollLeft;
        const scrollTop = this.scrollContainer.scrollTop;
        const scrollWidth = this.scrollContainer.clientWidth;
        const scrollHeight = this.scrollContainer.clientHeight;
        return new spatial.Rect(scrollLeft, scrollTop, scrollWidth, scrollHeight);
    }
}
exports.Scroller = Scroller;

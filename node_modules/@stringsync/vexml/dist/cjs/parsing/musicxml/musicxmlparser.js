"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MusicXMLParser = void 0;
const data = __importStar(require("../../data"));
const musicxml = __importStar(require("../../musicxml"));
const errors = __importStar(require("../../errors"));
const score_1 = require("./score");
const config_1 = require("../../config");
const debug_1 = require("../../debug");
class MusicXMLParser {
    config;
    log;
    constructor(opts) {
        this.config = { ...config_1.DEFAULT_CONFIG, ...opts?.config };
        this.log = opts?.logger ?? new debug_1.NoopLogger();
    }
    /** Parses a MusicXML source into a vexml data document. */
    parse(musicXMLSrc) {
        let musicXML;
        if (musicXMLSrc instanceof Document) {
            musicXML = new musicxml.MusicXML(musicXMLSrc);
        }
        else if (typeof musicXMLSrc === 'string') {
            musicXML = new musicxml.MusicXML(new DOMParser().parseFromString(musicXMLSrc, 'application/xml'));
        }
        else {
            throw new errors.VexmlError(`Invalid source type: ${musicXMLSrc}`);
        }
        const scorePartwise = musicXML.getScorePartwise();
        const score = score_1.Score.create(this.config, this.log, { scorePartwise }).parse();
        return new data.Document(score);
    }
}
exports.MusicXMLParser = MusicXMLParser;

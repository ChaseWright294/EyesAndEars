"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clef = void 0;
const conversions = __importStar(require("./conversions"));
class Clef {
    config;
    log;
    partId;
    staveNumber;
    sign;
    octaveChange;
    constructor(config, log, partId, staveNumber, sign, octaveChange) {
        this.config = config;
        this.log = log;
        this.partId = partId;
        this.staveNumber = staveNumber;
        this.sign = sign;
        this.octaveChange = octaveChange;
    }
    static default(config, log, partId, staveNumber) {
        return new Clef(config, log, partId, staveNumber, 'treble', null);
    }
    static create(config, log, partId, musicXML) {
        const clefSign = conversions.fromClefPropertiesToClefSign(musicXML.clef.getSign(), musicXML.clef.getLine());
        return new Clef(config, log, partId, musicXML.clef.getStaveNumber(), clefSign, musicXML.clef.getOctaveChange());
    }
    parse() {
        return {
            type: 'clef',
            sign: this.sign,
            octaveShift: this.octaveChange,
        };
    }
    getPartId() {
        return this.partId;
    }
    getStaveNumber() {
        return this.staveNumber;
    }
    isEqual(clef) {
        return this.partId === clef.partId && this.staveNumber === clef.staveNumber && this.isEquivalent(clef);
    }
    isEquivalent(clef) {
        return this.sign === clef.sign && this.octaveChange === clef.octaveChange;
    }
}
exports.Clef = Clef;

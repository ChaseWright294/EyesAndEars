"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metronome = void 0;
const conversions = __importStar(require("./conversions"));
class Metronome {
    config;
    log;
    playbackBpm;
    opts;
    constructor(config, log, playbackBpm, opts) {
        this.config = config;
        this.log = log;
        this.playbackBpm = playbackBpm;
        this.opts = opts;
    }
    static default(config, log) {
        return new Metronome(config, log, config.DEFAULT_PLAYBACK_BPM, {});
    }
    static create(config, log, musicXML) {
        const parenthesis = musicXML.metronome.parentheses() ?? undefined;
        const duration = conversions.fromNoteTypeToDurationType(musicXML.mark.left.unit) ?? undefined;
        const dots = musicXML.mark.left.dotCount;
        switch (musicXML.mark.right.type) {
            case 'note':
                const duration2 = conversions.fromNoteTypeToDurationType(musicXML.mark.right.unit) ?? undefined;
                const dots2 = musicXML.mark.right.dotCount;
                return new Metronome(config, log, config.DEFAULT_PLAYBACK_BPM, {
                    parenthesis,
                    duration,
                    dots,
                    duration2,
                    dots2,
                });
            case 'bpm':
                const displayBpm = musicXML.mark.right.bpm;
                return new Metronome(config, log, displayBpm, { parenthesis, duration, dots, displayBpm });
        }
    }
    parse() {
        return {
            type: 'metronome',
            playbackBpm: this.playbackBpm,
            ...this.opts,
        };
    }
    isEqual(metronome) {
        return (this.opts.name === metronome.opts.name &&
            this.opts.parenthesis === metronome.opts.parenthesis &&
            this.opts.duration === metronome.opts.duration &&
            this.opts.dots === metronome.opts.dots &&
            this.opts.displayBpm === metronome.opts.displayBpm &&
            this.opts.duration2 === metronome.opts.duration2 &&
            this.opts.dots2 === metronome.opts.dots2);
    }
}
exports.Metronome = Metronome;

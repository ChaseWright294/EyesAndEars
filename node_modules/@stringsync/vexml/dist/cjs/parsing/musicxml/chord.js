"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chord = void 0;
const util = __importStar(require("../../util"));
const note_1 = require("./note");
class Chord {
    config;
    log;
    notes;
    constructor(config, log, notes) {
        this.config = config;
        this.log = log;
        this.notes = notes;
    }
    static create(config, log, measureBeat, duration, musicXML) {
        util.assert(musicXML.note.isChordHead(), 'Expected note to be a chord head');
        const notes = [musicXML.note, ...musicXML.note.getChordTail()].map((note) => note_1.Note.create(config, log, measureBeat, duration, { note }));
        return new Chord(config, log, notes);
    }
    parse(voiceCtx) {
        const parsed = this.notes.map((note) => note.parse(voiceCtx));
        const notes = parsed.map((note) => ({
            type: 'chordnote',
            accidental: note.accidental,
            curveIds: note.curveIds,
            head: note.head,
            pitch: note.pitch,
            tabPositions: note.tabPositions,
        }));
        const annotations = parsed.flatMap((note) => note.annotations);
        const tupletIds = parsed.flatMap((note) => note.tupletIds);
        const graceEntries = parsed.flatMap((note) => note.graceEntries);
        const first = parsed.at(0);
        util.assertDefined(first);
        return {
            type: 'chord',
            notes,
            annotations,
            tupletIds,
            beamId: first.beamId,
            dotCount: first.dotCount,
            duration: first.duration,
            durationType: first.durationType,
            measureBeat: first.measureBeat,
            stemDirection: first.stemDirection,
            graceEntries,
            wedgeId: first.wedgeId,
            pedalMark: first.pedalMark,
            octaveShiftId: first.octaveShiftId,
            vibratoIds: first.vibratoIds,
            articulations: first.articulations,
            bends: first.bends,
        };
    }
}
exports.Chord = Chord;

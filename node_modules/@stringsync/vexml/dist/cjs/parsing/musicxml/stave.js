"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stave = void 0;
const util = __importStar(require("../../util"));
const voice_1 = require("./voice");
const contexts_1 = require("./contexts");
class Stave {
    config;
    log;
    number;
    partId;
    signature;
    voices;
    constructor(config, log, number, partId, signature, voices) {
        this.config = config;
        this.log = log;
        this.number = number;
        this.partId = partId;
        this.signature = signature;
        this.voices = voices;
    }
    static create(config, log, number, partId, signature, events) {
        const voiceEvents = events.filter((event) => typeof event.voiceId === 'string');
        const voices = util.unique(voiceEvents.map((event) => event.voiceId)).map((voiceId) => voice_1.Voice.create(config, log, voiceId, voiceEvents.filter((e) => e.voiceId === voiceId)));
        return new Stave(config, log, number, partId, signature, voices);
    }
    parse(partCtx) {
        const staveCtx = new contexts_1.StaveContext(partCtx, this.number);
        return {
            type: 'stave',
            signature: this.signature.asStaveSignature(this.partId, this.number).parse(),
            voices: this.voices.map((voice) => voice.parse(staveCtx)),
            multiRestCount: staveCtx.getMultiRestCount(),
        };
    }
}
exports.Stave = Stave;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Technical = void 0;
const upbow_1 = require("./upbow");
const downbow_1 = require("./downbow");
const harmonic_1 = require("./harmonic");
const openstring_1 = require("./openstring");
const thumbposition_1 = require("./thumbposition");
const fingering_1 = require("./fingering");
const pluck_1 = require("./pluck");
const doubletongue_1 = require("./doubletongue");
const tripletongue_1 = require("./tripletongue");
const stopped_1 = require("./stopped");
const snappizzicato_1 = require("./snappizzicato");
const fret_1 = require("./fret");
const tabstring_1 = require("./tabstring");
const hammeron_1 = require("./hammeron");
const pulloff_1 = require("./pulloff");
const bend_1 = require("./bend");
const tap_1 = require("./tap");
const heel_1 = require("./heel");
const toe_1 = require("./toe");
const fingernails_1 = require("./fingernails");
/**
 * The `<technical>` element groups together technical indications that give performance information for specific
 * instruments.
 *
 * See https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/technical/
 */
class Technical {
    element;
    constructor(element) {
        this.element = element;
    }
    /** Returns the up-bows of the technical. */
    getUpBows() {
        return this.element.children('up-bow').map((element) => new upbow_1.UpBow(element));
    }
    /** Returns the down-bows of the technical. */
    getDownBows() {
        return this.element.children('down-bow').map((element) => new downbow_1.DownBow(element));
    }
    /** Returns the harmonics of the technical. */
    getHarmonics() {
        return this.element.children('harmonic').map((element) => new harmonic_1.Harmonic(element));
    }
    /** Returns the open strings of the technical. */
    getOpenStrings() {
        return this.element.children('open-string').map((element) => new openstring_1.OpenString(element));
    }
    /** Returns the thumb positions of the technical. */
    getThumbPositions() {
        return this.element.children('thumb-position').map((element) => new thumbposition_1.ThumbPosition(element));
    }
    /** Returns the fingering of the technical. */
    getFingerings() {
        return this.element.children('fingering').map((element) => new fingering_1.Fingering(element));
    }
    /** Returns the plucks of the technical. */
    getPlucks() {
        return this.element.children('pluck').map((element) => new pluck_1.Pluck(element));
    }
    /** Returns the double tongues of the technical. */
    getDoubleTongues() {
        return this.element.children('double-tongue').map((element) => new doubletongue_1.DoubleTongue(element));
    }
    /** Returns the triple tongues of the technical. */
    getTripleTongues() {
        return this.element.children('triple-tongue').map((element) => new tripletongue_1.TripleTongue(element));
    }
    /** Returns the stopped of the technical. */
    getStopped() {
        return this.element.children('stopped').map((element) => new stopped_1.Stopped(element));
    }
    /** Returns the snap pizzicatos of the technical. */
    getSnapPizzicatos() {
        return this.element.children('snap-pizzicato').map((element) => new snappizzicato_1.SnapPizzicato(element));
    }
    /** Returns the frets of the technical. */
    getFrets() {
        return this.element.children('fret').map((element) => new fret_1.Fret(element));
    }
    /** Returns the tab strings of the technical. */
    getTabStrings() {
        return this.element.children('string').map((element) => new tabstring_1.TabString(element));
    }
    /** Returns the hammer-ons of the technical. */
    getHammerOns() {
        return this.element.children('hammer-on').map((element) => new hammeron_1.HammerOn(element));
    }
    /** Returns the pull-offs of the technical. */
    getPullOffs() {
        return this.element.children('pull-off').map((element) => new pulloff_1.PullOff(element));
    }
    /** Returns the bends of the technical. */
    getBends() {
        return this.element.children('bend').map((element) => new bend_1.Bend(element));
    }
    /** Returns the taps of the technical. */
    getTaps() {
        return this.element.children('tap').map((element) => new tap_1.Tap(element));
    }
    /** Returns the heels of the technical. */
    getHeels() {
        return this.element.children('heel').map((element) => new heel_1.Heel(element));
    }
    /** Returns the toes of the technical. */
    getToes() {
        return this.element.children('toe').map((element) => new toe_1.Toe(element));
    }
    /** Returns the fingernails of the technical. */
    getFingernails() {
        return this.element.children('fingernails').map((element) => new fingernails_1.Fingernails(element));
    }
}
exports.Technical = Technical;

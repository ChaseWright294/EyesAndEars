import { OctaveShift } from './octaveshift';
import { NamedElement } from '../util';
import { DirectionType } from './directiontype';
import { AboveBelow } from './enums';
import { Dynamics } from './dynamics';
import { Metronome } from './metronome';
import { Segno } from './segno';
import { Coda } from './coda';
import { Words } from './words';
import { Symbolic } from './symbolic';
import { Wedge } from './wedge';
import { Pedal } from './pedal';
/**
 * A direction is a musical indication that is not necessarily attached to a specific note.
 *
 * See https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/direction/
 */
export declare class Direction {
    private element;
    constructor(element: NamedElement<'direction'>);
    /**
     * Returns the type of direction.
     *
     * There should be at least one, but will default to an empty array.
     */
    getTypes(): DirectionType[];
    /** Returns the segnos of the direction. */
    getSegnos(): Segno[];
    /** Returns the codas of the direction. */
    getCodas(): Coda[];
    /** Returns the octave shifts of the direction. */
    getOctaveShifts(): OctaveShift[];
    /** Returns the dynamics of the direction. */
    getDynamics(): Dynamics[];
    /** Returns the metronomes of the direction. */
    getMetronome(): Metronome | null;
    /** Returns the tokens of the direction. */
    getTokens(): Array<Words | Symbolic>;
    /** Returns the wedges of the direction. */
    getWedges(): Wedge[];
    /** Returns the pedals of the direction. */
    getPedals(): Pedal[];
    /**
     * Returns the placement of the direction. Defaults to null.
     *
     * This is not universally applicable to all `<direction>` children. When a child specifies a placement, it overrides
     * this specification.
     */
    getPlacement(): AboveBelow | null;
    /** Returns the voice this direction belongs to. Defaults to null. */
    getVoice(): string | null;
    /** Returns the staff this direction belongs to. Defaults to null. */
    getStaveNumber(): number | null;
}

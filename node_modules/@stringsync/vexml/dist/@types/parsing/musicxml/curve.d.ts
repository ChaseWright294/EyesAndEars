import * as data from '../../data';
import * as musicxml from '../../musicxml';
import { VoiceEntryContext } from './contexts';
import { Config } from '../../config';
import { Logger } from '../../debug';
type CurvePhase = 'start' | 'continue' | 'stop';
/** A generic way of representing a curved connector in music notation. */
export declare class Curve {
    private config;
    private log;
    private curveNumber;
    private phase;
    private placement;
    private opening;
    private articulation;
    constructor(config: Config, log: Logger, curveNumber: number, phase: CurvePhase, placement: data.CurvePlacement, opening: data.CurveOpening, articulation: data.CurveArticulation);
    static create(config: Config, log: Logger, musicXML: {
        notation: musicxml.Notations;
    }): Curve[];
    private static createSlurs;
    private static createTies;
    parse(voiceEntryCtx: VoiceEntryContext): string;
}
export {};

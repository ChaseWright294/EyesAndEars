type Measure = {
    index: number;
    jumps: Jump[];
};
type Jump = {
    type: 'repeatstart';
} | {
    type: 'repeatend';
    times: number;
} | {
    type: 'repeatending';
    times: number;
};
/**
 * A class that iterates over measures in playback order (accounting for repeats and jumps).
 */
export declare class MeasureSequenceIterator<T extends Measure> implements Iterable<number> {
    private measures;
    constructor(measures: T[]);
    [Symbol.iterator](): Iterator<number>;
}
export {};
